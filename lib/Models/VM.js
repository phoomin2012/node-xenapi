// Generated by CoffeeScript 1.10.0
(function () {
  var Promise, VM, _, debug,
    bind = function (fn, me) {
      return function () {
        return fn.apply(me, arguments);
      };
    };

  debug = require('debug')('XenAPI:VM');

  Promise = require('bluebird');

  _ = require('lodash');

  VM = (function () {
    var session, xenAPI;

    session = void 0;

    xenAPI = void 0;


    /**
     * Construct VM
     * @class
     * @param      {Object}   session - An instance of Session
     * @param      {Object}   vm - A JSON object representing this VM
     * @param      {String}   opaqueRef - The OpaqueRef handle to this VM
     * @param      {Object}   xenAPI - An instance of XenAPI.
     */

    function VM(_session, _vm, _opaqueRef, _xenAPI) {
      // Config VM
      this.rename = bind(this.rename, this);
      this.setDescription = bind(this.setDescription, this);
      this.setVCPUMax = bind(this.setVCPUMax, this);
      this.setStartupCPUs = bind(this.setStartupCPUs, this);
      this.setMemory = bind(this.setMemory, this);
      this.setMemoryDynamicMin = bind(this.setMemoryDynamicMin, this);
      this.setMemoryDynamicMax = bind(this.setMemoryDynamicMax, this);
      this.setMemoryStaticMin = bind(this.setMemoryStaticMin, this);
      this.setMemoryStaticMax = bind(this.setMemoryStaticMax, this);
      // State Operation
      this.cleanShutdown = bind(this.cleanShutdown, this);
      this.cleanReboot = bind(this.cleanReboot, this);
      this.hardShutdown = bind(this.hardShutdown, this);
      this.hardReboot = bind(this.hardReboot, this);
      this.start = bind(this.start, this);
      this.shutdown = bind(this.shutdown, this);
      this.resume = bind(this.resume, this);
      this.suspend = bind(this.suspend, this);
      this.unpause = bind(this.unpause, this);
      this.pause = bind(this.pause, this);
      this.refreshPowerState = bind(this.refreshPowerState, this);
      // VM Operation 
      this.clone = bind(this.clone, this);
      this.convertToTemplate = bind(this.convertToTemplate, this);
      this.destroy = bind(this.destroy, this);
      // Get VM components
      this.getConsoles = bind(this.getConsoles, this);
      this.getGuestMetrics = bind(this.getGuestMetrics, this);
      this.getMetrics = bind(this.getMetrics, this);
      this.getVIFs = bind(this.getVIFs, this);
      this.getVBDs = bind(this.getVBDs, this);
      this.getSnapshots = bind(this.getSnapshots, this);
      // Xenstore
      this.xenstoreGet = bind(this.xenstoreGet, this);
      this.xenstoreSet = bind(this.xenstoreSet, this);
      this.xenstoreRemove = bind(this.xenstoreRemove, this);
      debug("constructor()");
      debug(_vm, _opaqueRef);
      if (!_session) {
        throw Error("Must provide `session`");
      }
      if (!_vm) {
        throw Error("Must provide `vm`");
      }
      if (!_opaqueRef) {
        throw Error("Must provide `opaqueRef`");
      }
      if (!_xenAPI) {
        throw Error("Must provide `xenAPI`");
      }
      if (!(!_vm.is_a_template && !_vm.is_control_domain && _vm.uuid)) {
        throw Error("`vm` does not describe a valid VM");
      }
      session = _session;
      xenAPI = _xenAPI;
      this.opaqueRef = _opaqueRef;
      this.uuid = _vm.uuid;
      this.name = _vm.name_label;
      this.description = _vm.name_description;
      this.other_config = _vm.other_config;
      this.xenToolsInstalled = !(_vm.guest_metrics === 'OpaqueRef:NULL');
      this.powerState = _vm.power_state;
      this.consoles = _vm.consoles;
      this.VIFs = _vm.VIFs || [];
      this.VBDs = _vm.VBDs || [];
      this.snapshots = _vm.snapshots;
      this.guest_metrics = _vm.guest_metrics;
      this.metrics = _vm.metrics;
      this.ram = _vm.memory_static_max;
      this.vcpu = _vm.VCPUs_max;
      this.vcpu_params = _vm.VCPUs_params;
      this.platform = _vm.platform;
      this.HVM_boot_params = _vm.HVM_boot_params;
      this.xenstore = _vm.xenstore_data || {};
    }

    VM.prototype.destroy = function () {
      debug("destroy()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.destroy", [_this.opaqueRef]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.rename = function (name) {
      debug("rename(" + name + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.set_name_label", [_this.opaqueRef, name]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.setDescription = function (desc) {
      debug("setDescription(" + desc + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.set_name_description", [_this.opaqueRef, desc]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    /**
     * Refresh the power state of this VM
     * @return     {Promise}
     */

    VM.prototype.refreshPowerState = function () {
      debug("refreshPowerState()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.get_power_state", [_this.opaqueRef]).then(function (value) {
            debug(value);
            _this.powerState = value;
            return resolve(value);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };


    /**
     * Pause this VM. Can only be applied to VMs in the Running state.
     * @return     {Promise}
     */

    VM.prototype.pause = function () {
      debug("pause()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.pause", [_this.opaqueRef]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };


    /**
     * Unpause this VM. Can only be applied to VMs in the Paused state.
     * @return     {Promise}
     */

    VM.prototype.unpause = function () {
      debug("unpause()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.unpause", [_this.opaqueRef]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };


    /**
     * Suspend this VM. Can only be applied to VMs in the Running state.
     * @return     {Promise}
     */

    VM.prototype.suspend = function () {
      debug("suspend()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.suspend", [_this.opaqueRef]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };


    /**
     * Resume this VM. Can only be applied to VMs in the Suspended state.
     * @return     {Promise}
     */

    VM.prototype.resume = function () {
      debug("resume()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          var force = false,
            startPaused = false;
          return session.request("VM.resume", [_this.opaqueRef, startPaused, force]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.start = function () {
      debug("start()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.start", [_this.opaqueRef, false, false]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.shutdown = function () {
      debug("shutdown()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.shutdown", [_this.opaqueRef]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.cleanReboot = function () {
      debug("cleanReboot()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.clean_reboot", [_this.opaqueRef]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.cleanShutdown = function () {
      debug("cleanShutdown()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.clean_shutdown", [_this.opaqueRef]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.hardReboot = function () {
      debug("hardReboot()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.hard_reboot", [_this.opaqueRef]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.hardShutdown = function () {
      debug("hardShutdown()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.hard_shutdown", [_this.opaqueRef]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.clone = function (name) {
      debug("clone(" + name + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.clone", [_this.opaqueRef, name]).then(function (value) {
            return xenAPI.vmCollection.findOpaqueRef(value).then(function (clonedVM) {
              return resolve(clonedVM);
            })["catch"](function (e) {
              debug(e);
              return reject(e);
            });
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.getVBDs = function () {
      debug("getVBDs()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          var vbdSearchPromises;
          vbdSearchPromises = [];
          _.each(_this.VBDs, function (vbd) {
            var vbdSearchPromise;
            vbdSearchPromise = xenAPI.vbdCollection.findOpaqueRef(vbd);
            return vbdSearchPromises.push(vbdSearchPromise);
          });
          return Promise.all(vbdSearchPromises).then(function (vbdObjects) {
            debug(vbdObjects);
            return resolve(vbdObjects);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.getVIFs = function () {
      debug("getVIFs()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          var vifSearchPromises;
          vifSearchPromises = [];
          _.each(_this.VIFs, function (vif) {
            var vifSearchPromise;
            vifSearchPromise = xenAPI.vifCollection.findOpaqueRef(vif);
            return vifSearchPromises.push(vifSearchPromise);
          });
          return Promise.all(vifSearchPromises).then(function (vifObjects) {
            debug(vifObjects);
            return resolve(vifObjects);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.getMetrics = function () {
      debug("getMetrics()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return xenAPI.metricsCollection.findOpaqueRef(_this.metrics).then(function (metrics) {
            return resolve(metrics);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.getGuestMetrics = function () {
      debug("getGuestMetrics()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return xenAPI.guestMetricsCollection.findOpaqueRef(_this.guest_metrics).then(function (guest_metrics) {
            return resolve(guest_metrics);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.getConsoles = function () {
      debug("getConsoles()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          var consoleSearchPromises;
          consoleSearchPromises = [];
          _.each(_this.consoles, function (console) {
            var consoleSearchPromise;
            consoleSearchPromise = xenAPI.consoleCollection.findOpaqueRef(console);
            return consoleSearchPromises.push(consoleSearchPromise);
          });
          return Promise.all(consoleSearchPromises).then(function (consoleObjects) {
            debug(consoleObjects);
            return resolve(consoleObjects);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.getSnapshots = function () {
      debug("getSnapshots()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          var snapshotSearchPromises;
          snapshotSearchPromises = [];
          _.each(_this.snapshots, function (console) {
            var snapshotSearchPromise;
            snapshotSearchPromise = xenAPI.snapshotCollection.findOpaqueRef(console);
            return snapshotSearchPromises.push(snapshotSearchPromise);
          });
          return Promise.all(snapshotSearchPromises).then(function (snapshot) {
            debug(snapshot);
            return resolve(snapshot);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    }

    VM.prototype.setMemory = function (rams) {
      debug("setMemoryStaticMax(" + rams + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.set_memory", [_this.opaqueRef, rams]).then(function (value) {
            return resolve(value);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.setMemoryStaticMax = function (max) {
      debug("setMemoryStaticMax(" + max + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.set_memory_static_max", [_this.opaqueRef, max]).then(function (value) {
            return resolve(value);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.setMemoryStaticMin = function (min) {
      debug("setMemoryStaticMin(" + min + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.set_memory_static_min", [_this.opaqueRef, min]).then(function (value) {
            return resolve(value);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.setMemoryDynamicMax = function (max) {
      debug("setMemoryDynamicMax(" + max + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.set_memory_dynamic_max", [_this.opaqueRef, max]).then(function (value) {
            return resolve(value);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.setMemoryDynamicMin = function (min) {
      debug("setMemoryDynamicMin(" + min + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.set_memory_dynamic_min", [_this.opaqueRef, min]).then(function (value) {
            return resolve(value);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.setStartupCPUs = function (count) {
      debug("setStartupCPUs(" + count + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.set_VCPUs_at_startup", [_this.opaqueRef, count]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.setVCPUMax = function (count) {
      debug("setVCPUMax(" + count + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.set_VCPUs_max", [_this.opaqueRef, count]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.setPlatform = function (field, value) {
      debug("setPlatform(" + field + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          _this.platform[field] = value;
          return session.request("VM.set_platform", [_this.opaqueRef, _this.platform]).then(function (value) {
            return resolve();
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.convertToTemplate = function () {
      debug("convertToTemplate()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.set_is_a_template", [_this.opaqueRef, true]).then(function (value) {
            return xenAPI.templateCollection.findOpaqueRef(_this.opaqueRef).then(function (template) {
              return resolve(template);
            });
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.xenstoreGet = function () {
      debug("xenstoreGet()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.get_xenstore_data", [_this.opaqueRef]).then(function (value) {
            return resolve(value);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.xenstoreAdd = function (field, value) {
      debug("xenstoreSet(" + field + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.add_to_xenstore_data", [_this.opaqueRef, field, value]).then(function (value) {
            return resolve(value);

          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.xenstoreSet = function (field, value) {
      debug("xenstoreSet(" + field + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          //let map = {};
          //map[field] = value;
          this.xenstore[field] = value;
          return session.request("VM.set_xenstore_data", [_this.opaqueRef, this.xenstore]).then(function (value) {
            return resolve(value);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.prototype.xenstoreRemove = function (field) {
      debug("xenstoreRemove(" + field + ")");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          return session.request("VM.remove_from_xenstore_data", [_this.opaqueRef, field]).then(function (value) {
            return resolve(value);
          })["catch"](function (e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VM.POWER_STATES = {
      HALTED: 'Halted',
      PAUSED: 'Paused',
      RUNNING: 'Running',
      SUSPENDED: 'Suspended'
    };

    VM.DEFAULT_CONFIG = {
      user_version: "0",
      is_a_template: false,
      is_control_domain: false,
      affinity: void 0,
      VCPUs_params: {},
      VCPUs_at_startup: "1",
      actions_after_shutdown: "destroy",
      actions_after_reboot: "restart",
      actions_after_crash: "restart",
      PV_bootloader: "pygrub",
      PV_kernel: void 0,
      PV_ramdisk: void 0,
      PV_args: "console=hvc0",
      PV_bootloader_args: void 0,
      PV_legacy_args: void 0,
      HVM_boot_policy: "",
      HVM_boot_params: {},
      platform: {},
      PCI_bus: void 0,
      other_config: {},
      recommendations: ""
    };

    return VM;

  })();

  module.exports = VM;

}).call(this);