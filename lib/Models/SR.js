// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, SR, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:SR');

  Promise = require('bluebird');

  SR = (function() {
    var session, xenAPI;

    session = void 0;

    xenAPI = void 0;


    /**
    * Construct SR
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   sr - A JSON object representing this SR
    * @param      {String}   opaqueRef - The OpaqueRef handle to this SR
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function SR(_session, _sr, _opaqueRef, _xenAPI) {
      this.scan = bind(this.scan, this);
      this.update = bind(this.update, this);
      //this.create = bind(this.create, this);
      //this.forgot = bind(this.forgot, this);
      //this.destroy = bind(this.destroy, this);

      debug("constructor()");
      debug(_sr, _opaqueRef);
      if (!_session) {
        throw Error("Must provide `session`");
      }
      if (!_sr) {
        throw Error("Must provide `sr`");
      }
      if (!_opaqueRef) {
        throw Error("Must provide `opaqueRef`");
      }
      session = _session;
      xenAPI = _xenAPI;
      this.opaqueRef = _opaqueRef;
      this.uuid = _sr.uuid;
      this.type = _sr.type;
      this.name = _sr.name_label;
      this.description = _sr.name_description;
      this.allowed_operations = _sr.allowed_operations;
      this.current_operations = _sr.current_operations;
      this.VDIs = _sr.VDIs;
      this.PBDs = _sr.PBDs;
      this.physical_utilisation = _sr.physical_utilisation;
      this.physical_size = _sr.physical_size;
      this.unused_space = _sr.physical_size - _sr.physical_utilisation;
      this.clustered = _sr.clustered;
      this.shared = _sr.shared;
      this.content_type = _sr.content_type;
      this.is_tools_sr = _sr.is_tools_sr;
    }

    SR.prototype.scan = function() {
      debug("scan()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("SR.scan", [_this.opaqueRef]).then(function(value) {
            return resolve();
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    SR.prototype.update = function() {
      debug("update()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("SR.update", [_this.opaqueRef]).then(function(value) {
            return resolve();
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    SR.prototype.rename = function(name) {
      debug(`rename(${name})`);
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("SR.set_name_label", [_this.opaqueRef, name]).then(function(value) {
            return resolve();
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    SR.prototype.setDescription = function(text) {
      debug(`setDescription(${name})`);
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("SR.set_name_description", [_this.opaqueRef, text]).then(function(value) {
            return resolve();
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return SR;

  })();

  module.exports = SR;

}).call(this);
