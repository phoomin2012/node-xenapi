// Generated by CoffeeScript 1.10.0
(function () {
  var Console, Promise, debug, net, url,
    bind = function (fn, me) {
      return function () {
        return fn.apply(me, arguments);
      };
    };

  debug = require('debug')('XenAPI:Console');

  Promise = require('bluebird');

  net = require('net');

  url = require('url');

  Console = (function () {
    var session, xenAPI;

    session = void 0;

    xenAPI = void 0;


    /**
     * Construct Console
     * @class
     * @param      {Object}   session - An instance of Session
     * @param      {Object}   cosnole - A JSON object representing this Console
     * @param      {String}   opaqueRef - The OpaqueRef handle to this Console
     * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function Console(_session, _console, _opaqueRef, _xenAPI) {
      this.rawConnect = bind(this.rawConnect, this);
      this.connect = bind(this.connect, this);
      debug("constructor()");
      debug(_console, _opaqueRef);
      if (!_session) {
        throw Error("Must provide `session`");
      }
      if (!_console) {
        throw Error("Must provide `console`");
      }
      if (!_opaqueRef) {
        throw Error("Must provide `opaqueRef`");
      }
      session = _session;
      xenAPI = _xenAPI;
      this.opaqueRef = _opaqueRef;
      this.uuid = _console.uuid;
      this.protocol = _console.protocol;
      this.other_config = _console.other_config;
      this.location = _console.location;
    }

    Console.prototype.rawConnect = function () {
      debug("rawConnect()");
      let parsedLocation = url.parse(this.location);
      return {
        uuid: this.uuid,
        host: parsedLocation.host,
        port: 80,
        path: parsedLocation.path,
        session: session.sessionID,
      }
    }

    Console.prototype.connect = function () {
      debug("connect()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          var options, parsedLocation, socket;
          parsedLocation = url.parse(_this.location);
          options = {
            host: parsedLocation.host,
            port: 80
          };
          socket = net.connect(options, function () {
            return socket.write("CONNECT " + parsedLocation.path + "&session_id=" + session.sessionID + " HTTP/1.0\r\n\r\n");
          });
          return socket.on('readable', function () {
            var N, chunk;
            N = 78;
            chunk = socket.read(N);
            if (chunk !== null) {
              if (chunk.toString().indexOf("HTTP/1.1 200 OK") === 0) {
                socket.removeAllListeners('readable');
                return resolve(socket);
              }
            }
          });
        };
      })(this));
    };

    return Console;

  })();

  module.exports = Console;

}).call(this);