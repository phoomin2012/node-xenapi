// Generated by CoffeeScript 1.10.0
(function () {
  var Promise, Session, debug,
    bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:Session');

  Promise = require('bluebird');

  Session = (function () {

    /**
    * Construct Session
    * @class
    * @param      {Object}   apiClient - An instance of APIClient
     */
    function Session(apiClient) {
      this.apiClient = apiClient;
      this.request = bind(this.request, this);
      this.logout = bind(this.logout, this);
      this.login = bind(this.login, this);
      this.changePassword = bind(this.changePassword, this);
      debug("constructor()");
      if (!this.apiClient) {
        throw Error("Must provide apiClient");
      }
      this.loggedIn = false;
    }


    /**
     * Login to the API
     * @param      {String}   username - The Username to log in with
     * @param      {String}   password - The Password to log in with
     * @return     {Promise}
     */

    Session.prototype.login = function (username, password) {
      debug("login()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          if (!_this.loggedIn) {
            return _this.apiClient.request("session.login_with_password", [username, password]).then(function (value) {
              debug("login Completed");
              _this.loggedIn = true;
              _this.sessionID = value;
              return resolve();
            })["catch"](function (e) {
              debug("login Failed");
              return reject(e);
            });
          } else {
            debug("already logged in");
            return reject();
          }
        };
      })(this));
    };


    /**
     * Logout from the API
     * @return     {Promise}
     */

    Session.prototype.logout = function () {
      debug("logout()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          if (!_this.loggedIn) {
            debug("not currently logged in");
            return reject();
          } else {
            return _this.apiClient.request("session.logout", [_this.sessionID]).then(function (value) {
              debug("logout Completed");
              _this.loggedIn = false;
              return resolve();
            })["catch"](function (e) {
              debug("logout Failed");
              return reject(e);
            });
          }
        };
      })(this));
    };


    /**
     * Make a request via the API
     * @protected
     * @param      {String}   method - The method to call on the API
     * @param      {Array}   args - Array of arguments pass to the API
     * @return     {Promise}
     */

    Session.prototype.request = function (method, args) {
      debug("request(" + method + ", " + args + ")");
      if (!this.loggedIn) {
        debug("not logged in");
        return new Promise(function (resolve, reject) {
          reject(['MUST_LOGIN_FIRST', '', 'Must be logged in to make API requests.']);
        });
      }
      if (!args) {
        args = [];
      }
      return new Promise((function (_this) {
        return function (resolve, reject) {
          args.unshift(_this.sessionID);
          return _this.apiClient.request(method, args).then(function (value) {
            return resolve(value);
          })["catch"](function (e) {
            return reject(e);
          });
        };
      })(this));
    };

    Session.prototype.changePassword = function (oldPassword, newPassword) {
      debug("changePassword()");
      return new Promise((function (_this) {
        return function (resolve, reject) {
          if (!_this.loggedIn) {
            debug("not currently logged in");
            return reject();
          } else {
            return _this.apiClient.request("session.change_password", [oldPassword, newPassword]).then(function (value) {
              debug("changePassword Completed");
              return resolve();
            })["catch"](function () {
              debug("changePassword Failed");
              return reject();
            });
          }
        };
      })(this));
    }

    return Session;

  })();

  module.exports = Session;

}).call(this);
