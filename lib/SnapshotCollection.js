// Generated by CoffeeScript 1.10.0
(function() {
    var Promise, SnapshotCollection, _, debug, minimatch,
      bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  
    debug = require('debug')('XenAPI:SnapshotCollection');
  
    Promise = require('bluebird');
  
    minimatch = require('minimatch');
  
    _ = require('lodash');
  
    SnapshotCollection = (function() {
      var Snapshot, createSnapshotInstance, session, xenAPI;
  
      Snapshot = void 0;
  
      session = void 0;
  
      xenAPI = void 0;
  
      createSnapshotInstance = function(snapshot, opaqueRef) {
        if (snapshot && !snapshot.is_a_snapshot && !snapshot.is_control_domain && snapshot.is_a_snapshot) {
          return new Snapshot(session, snapshot, opaqueRef, xenAPI);
        }
      };
  
  
      /**
      * Construct SnapshotCollection
      * @class
      * @param      {Object}   session - An instance of Session
      * @param      {Object}   Snapshot - Dependency injection of the Snapshot class.
      * @param      {Object}   xenAPI - An instance of XenAPI
       */
  
      function SnapshotCollection(_session, _Snapshot, _xenAPI) {
        this.findOpaqueRef = bind(this.findOpaqueRef, this);
        this.findUUID = bind(this.findUUID, this);
        this.findNamed = bind(this.findNamed, this);
        this.listCustom = bind(this.listCustom, this);
        this.list = bind(this.list, this);
        debug("constructor()");
        if (!_session) {
          throw Error("Must provide session");
        }
        if (!_Snapshot) {
          throw Error("Must provide Snapshot");
        }
        if (!_xenAPI) {
          throw Error("Must provide xenAPI");
        }
        session = _session;
        xenAPI = _xenAPI;
        Snapshot = _Snapshot;
      }
  
  
      /**
      * List all Snapshots
      * @return     {Promise}
       */
  
      SnapshotCollection.prototype.list = function() {
        debug("list()");
        return new Promise((function(_this) {
          return function(resolve, reject) {
            var query;
            query = 'field "is_a_snapshot" = "true" and field "is_a_template" = "false"';
            return session.request("VM.get_all_records_where", [query]).then(function(value) {
              var Snapshots;
              if (!value) {
                reject();
              }
              debug("Received " + (Object.keys(value).length) + " records");
              Snapshots = _.map(value, createSnapshotInstance);
              return resolve(_.filter(Snapshots, function(snapshot) {
                return snapshot;
              }));
            })["catch"](function(e) {
              debug(e);
              return reject(e);
            });
          };
        })(this));
      };
  
      SnapshotCollection.prototype.listCustom = function() {
        debug("listCustom()");
        return new Promise((function(_this) {
          return function(resolve, reject) {
            var query;
            query = 'field "is_a_snapshot" = "true" and field "is_a_template" = "false"';
            return session.request("VM.get_all_records_where", [query]).then(function(value) {
              var Snapshots, filteredValues;
              if (!value) {
                reject();
              }
              debug("Received " + (Object.keys(value).length) + " records");
              filteredValues = _.mapValues(value, function(snapshot) {
                if (!snapshot.other_config.default_snapshot) {
                  return snapshot;
                }
              });
              Snapshots = _.map(filteredValues, createSnapshotInstance);
              return resolve(_.filter(Snapshots, function(snapshot) {
                return snapshot;
              }));
            })["catch"](function(e) {
              debug(e);
              return reject(e);
            });
          };
        })(this));
      };
  
      SnapshotCollection.prototype.findNamed = function(name) {
        debug("findNamed(" + name + ")");
        return new Promise((function(_this) {
          return function(resolve, reject) {
            return _this.list().then(function(snapshots) {
              var matchSnapshotName, matches;
              matchSnapshotName = function(snapshot) {
                if (minimatch(snapshot.name, name, {
                  nocase: true
                })) {
                  return snapshot;
                }
              };
              matches = _.map(snapshots, matchSnapshotName);
              return resolve(_.filter(matches, function(snapshot) {
                return snapshot;
              }));
            })["catch"](function(e) {
              debug(e);
              return reject(e);
            });
          };
        })(this));
      };
  
      SnapshotCollection.prototype.findUUID = function(uuid) {
        debug("findUUID(" + uuid + ")");
        return new Promise((function(_this) {
          return function(resolve, reject) {
            var query;
            query = 'field "uuid"="' + uuid + '"';
            return session.request("VM.get_all_records_where", [query]).then(function(value) {
              var Snapshots, filtered;
              if (!value) {
                reject();
              }
              debug("Received " + (Object.keys(value).length) + " records");
              Snapshots = _.map(value, createSnapshotInstance);
              filtered = _.filter(Snapshots, function(snapshot) {
                return snapshot;
              });
              if (filtered.length > 1) {
                return reject("Multiple Snapshots for UUID " + uuid);
              } else {
                return resolve(filtered[0]);
              }
            })["catch"](function(e) {
              debug(e);
              return reject(e);
            });
          };
        })(this));
      };
  
      SnapshotCollection.prototype.findOpaqueRef = function(opaqueRef) {
        debug("findOpaqueRef(" + opaqueRef + ")");
        return new Promise((function(_this) {
          return function(resolve, reject) {
            return session.request("VM.get_record", [opaqueRef]).then(function(value) {
              var snapshot;
              if (!value) {
                reject();
              }
              snapshot = createSnapshotInstance(value, opaqueRef);
              return resolve(snapshot);
            })["catch"](function(e) {
              debug(e);
              return reject(e);
            });
          };
        })(this));
      };
  
      return SnapshotCollection;
  
    })();
  
    module.exports = SnapshotCollection;
  
  }).call(this);
  